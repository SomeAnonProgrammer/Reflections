1) How did viewing a diff between two versions help you spot the bug?
	Viewing a diff between the two versions helped to show the differences between the old and new code which  may have caused a problem.

2) How could having easy access to the entire history of a file make you a more efficient programmer in the long term?
	Having easy access to the entire history allows a programmer to look back on previous versions and more efficiently see differences in the code.

3) What do you think are the pros and cons of manually choosing when to create a commit, like you do in Git, vs having versions automatically saved, like Google Docs does?

- Pros: you get to decide when you need a change, you make logical commits, commits arenâ€™t random, commits are understandable
- Cons: human error, forget to commit, decide to commit at bad time

4) Why do you think some version control systems, like Git, allow saving multiple files in one commit, while others, like Google Docs, treat each file separately?
	Git allows saving multiple files in one commit because when coding, it is more common to have interrelated codes. In other systems, like Google Docs, files (documents) are rarely interconnected, hence no need for multiple files in one commit.

5) How can you use the commands git log and git diff to view the history of files?
	You can first use the command git log to see commits and their changes. Then you can used git diff to compare differences between them.

6) How might using version control make you more confident to make changes that could break something?
	Version control can help you find the changes that are breaking something, which reduces the risk of permanently damaging the code, which in return increases confidence.

7) Now that you have your workspace set up, what do you want to try using Git for?
	I want to try using Git to make entire apps (kind of ambitious, I know).


